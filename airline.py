# -*- coding: utf-8 -*-
"""Untitled58.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iwKkdhD13eH1ZFTk6x1KCcyZmHp6V8ty
"""

# app.py
from flask import Flask, render_template, request, redirect, url_for, flash
import pymysql
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY", "dev-key")

DB_CONFIG = {
    "host": os.getenv("DB_HOST", "localhost"),
    "user": os.getenv("DB_USER", "root"),
    "password": os.getenv("DB_PASS", ""),
    "database": os.getenv("DB_NAME", "airline_app"),
    "cursorclass": pymysql.cursors.DictCursor,
    "autocommit": True,
}

def get_db():
    return pymysql.connect(**DB_CONFIG)

def get_available_seats(conn, flight_id):
    with conn.cursor() as cur:
        cur.execute("SELECT capacity FROM flights WHERE id=%s", (flight_id,))
        row = cur.fetchone()
        if not row:
            return 0
        capacity = int(row["capacity"])
        cur.execute("SELECT COALESCE(SUM(seats), 0) AS booked FROM bookings WHERE flight_id=%s", (flight_id,))
        booked = int(cur.fetchone()["booked"])
        return max(capacity - booked, 0)

@app.route("/", methods=["GET"])
def index():
    return render_template("index.html")

@app.route("/search", methods=["GET"])
def search():
    origin = request.args.get("origin", "").strip().upper()
    destination = request.args.get("destination", "").strip().upper()
    date_str = request.args.get("date", "").strip()

    if not origin or not destination or not date_str:
        flash("Please enter origin, destination, and date.")
        return redirect(url_for("index"))

    try:
        date = datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        flash("Invalid date format. Use YYYY-MM-DD.")
        return redirect(url_for("index"))

    start = date
    end = date + timedelta(days=1)

    conn = get_db()
    with conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT id, flight_no, origin, destination, depart_time, arrive_time, capacity, price
                FROM flights
                WHERE origin=%s AND destination=%s
                  AND depart_time >= %s AND depart_time < %s
                ORDER BY depart_time ASC
            """, (origin, destination, start, end))
            flights = cur.fetchall()
            # add available seats
            for f in flights:
                f["available"] = get_available_seats(conn, f["id"])
    return render_template("results.html", flights=flights, origin=origin, destination=destination, date=date_str)

@app.route("/flight/<int:flight_id>", methods=["GET"])
def flight_detail(flight_id):
    conn = get_db()
    with conn:
        with conn.cursor() as cur:
            cur.execute("SELECT * FROM flights WHERE id=%s", (flight_id,))
            flight = cur.fetchone()
            if not flight:
                flash("Flight not found.")
                return redirect(url_for("index"))
            flight["available"] = get_available_seats(conn, flight_id)
    return render_template("flight.html", flight=flight)

@app.route("/book/<int:flight_id>", methods=["POST"])
def book(flight_id):
    name = request.form.get("name", "").strip()
    email = request.form.get("email", "").strip()
    seats = request.form.get("seats", "1").strip()

    if not name or not email:
        flash("Name and email are required.")
        return redirect(url_for("flight_detail", flight_id=flight_id))

    try:
        seats = int(seats)
        if seats <= 0:
            raise ValueError
    except ValueError:
        flash("Seats must be a positive integer.")
        return redirect(url_for("flight_detail", flight_id=flight_id))

    conn = get_db()
    with conn:
        available = get_available_seats(conn, flight_id)
        if seats > available:
            flash(f"Only {available} seats are available.")
            return redirect(url_for("flight_detail", flight_id=flight_id))

        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO bookings (flight_id, customer_name, customer_email, seats)
                VALUES (%s, %s, %s, %s)
            """, (flight_id, name, email, seats))
            cur.execute("""
                SELECT b.id, f.flight_no, f.origin, f.destination, f.depart_time, f.arrive_time, f.price, b.seats, b.booked_at
                FROM bookings b
                JOIN flights f ON b.flight_id=f.id
                WHERE b.id = LAST_INSERT_ID()
            """)
            booking = cur.fetchone()

    return render_template("booked.html", booking=booking, name=name, email=email)

@app.route("/my-bookings", methods=["GET", "POST"])
def my_bookings():
    bookings = []
    email = ""
    if request.method == "POST":
        email = request.form.get("email", "").strip()
        if email:
            conn = get_db()
            with conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        SELECT b.id, b.seats, b.booked_at,
                               f.flight_no, f.origin, f.destination, f.depart_time, f.arrive_time, f.price
                        FROM bookings b
                        JOIN flights f ON b.flight_id = f.id
                        WHERE b.customer_email=%s
                        ORDER BY b.booked_at DESC
                    """, (email,))
                    bookings = cur.fetchall()
        else:
            flash("Enter your email to view bookings.")
    return render_template("my_bookings.html", email=email, bookings=bookings)

# simple admin page to add flights (no auth for demo)
@app.route("/add-flight", methods=["GET", "POST"])
def add_flight():
    if request.method == "POST":
        flight_no = request.form.get("flight_no", "").strip().upper()
        origin = request.form.get("origin", "").strip().upper()
        destination = request.form.get("destination", "").strip().upper()
        depart_time = request.form.get("depart_time", "").strip()
        arrive_time = request.form.get("arrive_time", "").strip()
        capacity = request.form.get("capacity", "0").strip()
        price = request.form.get("price", "0").strip()

        try:
            capacity = int(capacity)
            price = float(price)
            # Validate datetimes
            _ = datetime.fromisoformat(depart_time.replace("Z",""))
            _ = datetime.fromisoformat(arrive_time.replace("Z",""))
        except Exception:
            flash("Please check capacity, price, and datetime formats (use YYYY-MM-DD HH:MM:SS).")
            return redirect(url_for("add_flight"))

        if not all([flight_no, origin, destination, depart_time, arrive_time]):
            flash("All fields are required.")
            return redirect(url_for("add_flight"))

        conn = get_db()
        with conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO flights (flight_no, origin, destination, depart_time, arrive_time, capacity, price)
                    VALUES (%s,%s,%s,%s,%s,%s,%s)
                """, (flight_no, origin, destination, depart_time, arrive_time, capacity, price))
        flash("Flight added.")
        return redirect(url_for("add_flight"))
    return render_template("add_flight.html")

if __name__ == "__main__":
    app.run(debug=True)